Getting Started with the Strava API


Welcome to the Strava API! This is a brief overview of how to use our API. Anyone who breaks a sweat is an athlete, so we refer to our users as athletes.



🌈 Table of Contents

A. Basic info about the API
B. How to create an account
C. How to make a cURL request
D. How to authenticate with OAuth 2.0
E. How to use the Swagger Playground
F. Why Do I Need Webhooks?
G. How to Get Support






🚴🏿‍♀️ A. Basic info about the API 🏃🏿‍♀️ 🚣


The Strava REST API includes data on athletes, segments, routes, clubs, and gear. It is free to use. The Strava API does not allow you to get data for all Strava public athletes, as you can see on our website.

To get data on athletes, you will have to make an application and request that athletes sign in with Strava, and grant your application certain permissions using OAuth 2.0. You can get data on yourself without authentication for testing purposes.

Strava API usage is limited on a per-application basis using both a 15-minute and daily request limit. The default rate limit allows 200 requests every 15 minutes, with up to 2,000 requests per day.

If you’re looking to connect our athlete community to your app, and aren’t just developing for yourself, with your own data, please submit your app for review!

- Quick Links

Rate limits and pagination
Uploading files
Terms of Service
Brand Guidelines

- Examples of What to Build with the Strava API

Create a print of your route
Add weather for your activities
Listen for new Strava activities using Strava webhooks
Measure how you are performing in your athletic activities






🏄‍♀️ B. How to Create an account 🧗🏿‍♂️


To start developing with the Strava API, you will need to make an application

If you have not already, go to https://www.strava.com/register and sign up for a Strava account.
After you are logged in, go to https://www.strava.com/settings/api and create an app.
You should see the “My API Application” page now. Here is what everything means:
Category: The category you chose for your application
Club: Will show if you have a club associated with your application
Client ID: Your application ID
Client Secret: Your client secret (please keep this confidential)
Authorization token: Your authorization token which will change every six hours (please keep this confidential)
Your Refresh token: The token you will use to get a new authorization token (please keep this confidential)
Rate limits: Your current rate limit
Authorization Callback Domain: When building your app, change “Authorization Callback Domain” to localhost or any domain. When taking your app live, change “Authorization Callback Domain” to a real domain.
 




🏊‍♀️ C. How to Make a cURL request 🏂


Let’s make a cURL request against the Strava API. cUrl is a command line tool and is available on all platforms. For our first request, we are going to get our profile information which is this call: https://developers.strava.com/docs/reference/#api-Athletes-getLoggedInAthlete

Access tokens are required for all requests, and can be included by adding “Authorization: Bearer #{access_token}” as a header.

To get your access token, go to https://www.strava.com/settings/api. Access tokens expire every six hours.

Make a cURL request:

curl -X GET \
https://www.strava.com/api/v3/athlete \
-H 'Authorization: Bearer YOURACCESSTOKEN'
If you are using Postman, it will look like this:







🧗🏿‍♀️ D. How to Authenticate 🏊


As you may have already noticed, we require authentication via OAuth 2.0 in order to request data about any athlete. OAuth 2.0 allows developers to interact with Strava athletes without having to store sensitive information. View our full documentation here.

When OAuth is initiated, the athlete is prompted by the application to log in to the Strava website and give consent to the requesting application. This is what your athlete will see:



After the athlete accepts or rejects the authorization request, Strava redirects the athlete to a URL specified by the application. If the athlete authorized the application, the URL query string will include an authorization code and the scope accepted by the athlete. Please check to see that the athlete has accepted all of your scopes. The application must complete the authentication process by exchanging the authorization code for a refresh token and short-lived access token.

Confused? Here is a Graph:



For demonstration purposes only, here is how to reproduce the graph above with cURL:

Go to https://www.strava.com/settings/api and copy your Client ID
Paste your Client ID into this URL: http://www.strava.com/oauth/authorize?client_id=[REPLACE_WITH_YOUR_CLIENT_ID]&response_type=code&redirect_uri=http://localhost/exchange_token&approval_prompt=force&scope=read
Go to a browser
Paste the URL you edited into the browser window (step 1 and 2 from the graph)
Hit enter
When you see the authorization page, click “Authorize” (step 3a from the graph) 
After you click “Authorize,” you should see something like, “this site can’t be reached”
Stay on that page and look at the URL
The URL will show the authorization code and scope accepted by the athlete (step 5 from the graph) 
Copy the authorization code
Make a cURL request to exchange the authorization code and scope for a refresh token, access token, and access token expiration date (step 7a from the graph). Replace the client_secret and code. The response should include the refresh token, access token, and access token expiration date (step 8 from the graph).

Sample cURL request:

	curl -X POST https://www.strava.com/oauth/token \
	-F client_id=YOURCLIENTID \
	-F client_secret=YOURCLIENTSECRET \
	-F code=AUTHORIZATIONCODE \
	-F grant_type=authorization_code
If you are using Postman, here is a sample request:

 Sample response:

{
    "token_type": "Bearer",
    "expires_at": 1562908002,
    "expires_in": 21600,
    "refresh_token": "REFRESHTOKEN",
    "access_token": "ACCESSTOKEN",
    "athlete": {
        "id": 123456,
        "username": "MeowTheCat",
        "resource_state": 2,
        "firstname": "Meow",
        "lastname": "TheCat",
        "city": "",
        "state": "",
        "country": null,
        ...
    }
}
For more information on authentication, click here.






🏊🏿‍♀️ E. How to Use the Swagger Playground 🏄


The Swagger Playground is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, you will have to change your “Authorization Callback Domain” to developers.strava.com.

Go to the Playground, https://developers.strava.com/playground, and click the green “Authorize” button on the right.
You will use your Client ID and Client Secret from https://www.strava.com/settings/api.






🏃🏿‍♀️ F. Why Do I Need Webhooks? 🚣


Per our API terms, you need to implement webhooks to know when an athlete has deauthorized your API application
To avoid hitting rate limits
Instead of polling to see if athletes have new activities, you can subscribe to activity updates
To know if activities have changed from public to private
To subscribe to webhooks, please follow the instructions here





⛵️ G. How to Get Support 🚴🏿‍♀️


Before emailing, please check our documentation first:

Authentication: https://developers.strava.com/docs/authentication
Webhooks: https://developers.strava.com/docs/webhooks
API docs: https://developers.strava.com/docs/reference
Basic info: https://developers.strava.com/docs




Authentication


Table of Contents

Introduction
OAuth Overview
Requesting Access
Details About Requesting Access
Token Exchange
Refreshing Expired Access Tokens
Accessing the API Using an Access Token
Deauthorization
How To Get Support




Introduction
Strava uses OAuth2 for authentication to the V3 API. OAuth allows external applications to request authorization to a user’s data. It allows users to grant and revoke API access on a per-application basis and keeps users’ authentication details safe.

All developers need to register their application before getting started. A registered application will be assigned a client ID and client secret. The secret is used for authentication and should never be shared.






OAuth Overview
When OAuth is initiated, the user is prompted by the application to log in on the Strava website and to give consent to the requesting application. A user can opt out of the scopes requested by the application.

After the user accepts or rejects the authorization request, Strava redirects the user to a URL specified by the application. If the user authorized the application, the URL query string will include an authorization code and the scope accepted by the user. Apps should check which scopes a user has accepted. Applications complete the authorization process by exchanging the authorization code for a refresh token and short-lived access token.

Access tokens are used by applications to obtain and modify Strava resources on behalf of the authenticated athlete. Refresh tokens are used to obtain new access tokens when older ones expire.

Note that Google Sign-in will not work for applications using a mobile webview. See Google’s blog post for further information and ways to work around that limitation.

Step-by-step guide:







Requesting Access
To initiate the flow, applications must redirect the user to Strava’s authorization page. The authorization endpoint is different for mobile and web applications.



Web applications
Redirect the user to GET https://www.strava.com/oauth/authorize.



Mobile applications
Our authentication flows are slightly different for Android and iOS due to App Store and Google Play Store guidelines and recommendations. Below you’ll find code samples for both platforms. Here are some details about mobile OAuth:

If a user does not have the Strava app installed, they should be redirected to mobile web to complete OAuth.
Mobile OAuth supports refresh tokens and short-lived access tokens. Mobile OAuth does not support forever access tokens.
Users must have version 75.0 or later of the Strava app installed in order to take advantage of mobile OAuth. Users without the Strava app or with an older app version will be brought to a web endpoint where they can authorize your app.


Android
Android apps can use an Implicit Intent to redirect users to the GET https://www.strava.com/oauth/mobile/authorize endpoint. The Strava app should open automatically if the user has it installed.

Sample code:

val intentUri = Uri.parse("https://www.strava.com/oauth/mobile/authorize")
        .buildUpon()
        .appendQueryParameter("client_id", "1234321")
        .appendQueryParameter("redirect_uri", "https://www.yourapp.com")
        .appendQueryParameter("response_type", "code")
        .appendQueryParameter("approval_prompt", "auto")
        .appendQueryParameter("scope", "activity:write,read")
        .build()

val intent = Intent(Intent.ACTION_VIEW, intentUri)
startActivity(intent)


iOS
If the user does not have Strava installed, your app should use SFAuthenticationSession or ASWebAuthenticationSession, depending on which versions of iOS your app supports. If your app is linked on or after iOS 9.0, you must add strava in you app’s Info.plist file. It should be added under the LSApplicationQueriesSchemes key. Failure to do this will result in a crash when calling canOpenUrl:.

You should check first if your app can open the appOAuthURLStravaScheme. If it can, the Strava app is installed and should handle the authentication. You can proceed by opening that same URL.

If your app is not able to open that URL, proceed with using the webOAuthUrl. You should use SFAuthenticationSessions or ASWebAuthenticationSession to prevent the user from leaving your application to authenticate. Ensure that the callbackURLScheme is a registered url scheme in your application.

Sample code:

private var authSession: SFAuthenticationSession?

let appOAuthUrlStravaScheme = URL(string: "strava://oauth/mobile/authorize?client_id=1234321&redirect_uri=YourApp%3A%2F%2Fwww.yourapp.com%2Fen-US&response_type=code&approval_prompt=auto&scope=activity%3Awrite%2Cread&state=test")!

let webOAuthUrl = URL(string: "https://www.strava.com/oauth/mobile/authorize?client_id=1234321&redirect_uri= YourApp%3A%2F%2Fwww.yourapp.com%2Fen-US&response_type=code&approval_prompt=auto&scope=activity%3Awrite%2Cread&state=test")!

@IBAction func authenticate() {
    if UIApplication.shared.canOpenURL(appOAuthUrlstravaScheme) {
        UIApplication.shared.open(appOAuthUrlstravaScheme, options: [:])
    } else {
        authSession = SFAuthenticationSession(url: webOAuthUrl, callbackURLScheme: "YourApp://") { url, error in

        }

        authSession?.start()
    }
}





Details About Requesting Access
On both web and mobile the authorization page will prompt the user to grant your application access to their data. Scopes requested by the application are shown as checked boxes, but the user may opt out of any requested scopes. If an application relies on specific scopes to function properly, the application should make that clear before and after authentication.

client_id
required integer, in query	The application’s ID, obtained during registration.
redirect_uri
required string, in query	URL to which the user will be redirected after authentication. Must be within the callback domain specified by the application. localhost and 127.0.0.1 are white-listed.
response_type
required string, in query	Must be code.
approval_prompt
string, in query	force or auto, use force to always show the authorization prompt even if the user has already authorized the current application, default is auto.
scope
required string, in query	
Requested scopes, as a comma delimited string, e.g. "activity:read_all,activity:write". Applications should request only the scopes required for the application to function normally. The scope activity:read is required for activity webhooks.

read: read public segments, public routes, public profile data, public posts, public events, club feeds, and leaderboards
read_all:read private routes, private segments, and private events for the user
profile:read_all: read all profile information even if the user has set their profile visibility to Followers or Only You
profile:write: update the user's weight and Functional Threshold Power (FTP), and access to star or unstar segments on their behalf
activity:read: read the user's activity data for activities that are visible to Everyone and Followers, excluding privacy zone data
activity:read_all: the same access as activity:read, plus privacy zone data and access to read the user's activities with visibility set to Only You
activity:write: access to create manual activities and uploads, and access to edit any activities that are visible to the app, based on activity read access level
state
string, in query	Returned in the redirect URI. Useful if the authentication is done from various points in an app.





Token Exchange
Strava will respond to the authorization request by redirecting the user agent to the redirect_uri provided.

If access is denied, error=access_denied will be included in the query string.

If access is accepted, code and scope parameters will be included in the query string. The code parameter contains the authorization code required to complete the authentication process. code is short lived and can only be used once. The application must now call the POST https://www.strava.com/oauth/token with its client ID and client secret to exchange the authorization code for a refresh token and short-lived access token.

The state parameter will be always included in the response if it was initially provided by the application.



Request Parameters
client_id
required integer, in query	The application’s ID, obtained during registration.
client_secret
required string, in query	The application’s secret, obtained during registration.
code
required string, in query	The code parameter obtained in the redirect.
grant_type
required string, in query	The grant type for the request. For initial authentication, must always be "authorization_code".


Example cURL Request

curl -X POST https://www.strava.com/api/v3/oauth/token \
  -d client_id=ReplaceWithClientID \
  -d client_secret=ReplaceWithClientSecret \
  -d code=ReplaceWithCode \
  -d grant_type=authorization_code


Response Parameters
A refresh token, access token, and access token expiration date will be issued upon successful authentication.



expires_at
integer	The number of seconds since the epoch when the provided access token will expire
expires_in
integer	Seconds until the short-lived access token will expire
refresh_token
string	The refresh token for this user, to be used to get the next access token for this user. Please expect that this value can change anytime you retrieve a new access token. Once a new refresh token code has been returned, the older code will no longer work.
athlete
string	A summary of athlete information


Example Response

{
  "token_type": "Bearer",
  "expires_at": 1568775134,
  "expires_in": 21600,
  "refresh_token": "e5n567567...",
  "access_token": "a4b945687g...",
  "athlete": {
    #{summary athlete representation}
  }
}





Refreshing Expired Access Tokens
Access tokens expire six hours after they are created, so they must be refreshed in order for an application to maintain access to a user’s resources. Every time you get a new access token, we return a new refresh token as well. If you need to make a request, we recommend checking to see if the short-lived access token has expired. If it has expired, request a new short-lived access token with the last received refresh token.







To refresh an access token, applications should call the POST https://www.strava.com/oauth/token endpoint, specifying grant_type: refresh_token and including the application’s refresh token for the user as an additional parameter. If the application has an access token for the user that expires in more than one hour, the existing access token will be returned. If the application’s access tokens for the user are expired or will expire in one hour (3,600 seconds) or less, a new access token will be returned. In this case, both the newer and older access tokens can be used until they expire.

A refresh token is issued back to the application after all successful requests to the POST https://www.strava.com/oauth/token endpoint. The refresh token may or may not be the same refresh token used to make the request. Applications should persist the refresh token contained in the response, and always use the most recent refresh token for subsequent requests to obtain a new access token. Once a new refresh token is returned, the older refresh token is invalidated immediately.



Request Parameters
client_id
required integer, in query	The application’s ID, obtained during registration.
client_secret
required string, in query	The application’s secret, obtained during registration.
grant_type
required string, in query	The grant type for the request. When refreshing an access token, must always be "refresh_token".
refresh_token
required string, in query	The refresh token for this user, to be used to get the next access token for this user. Please expect that this value can change anytime you retrieve a new access token. Once a new refresh token code has been returned, the older code will no longer work.




Example cURL Request

curl -X POST https://www.strava.com/api/v3/oauth/token \
  -d client_id=ReplaceWithClientID \
  -d client_secret=ReplaceWithClientSecret \
  -d grant_type=refresh_token \
  -d refresh_token=ReplaceWithRefreshToken


Response Parameters
access_token
string	The short-lived access token
expires_at
integer	The number of seconds since the epoch when the provided access token will expire
expires_in
integer	Seconds until the short-lived access token will expire
refresh_token
string	The refresh token for this user, to be used to get the next access token for this user. Please expect that this value can change anytime you retrieve a new access token. Once a new refresh token code has been returned, the older code will no longer work.


Example Response

{
  "token_type": "Bearer",
  "access_token": "a9b723...",
  "expires_at":1568775134,
  "expires_in":20566,
  "refresh_token":"b5c569..."
}


How to Store Short-Lived Access Tokens and Refresh Tokens
Storing the scopes your athletes accept is great in case you get unexpected results (for example: why am I not getting activities for this user?)
In general, we recommend storing short-lived access tokens and refresh tokens in separate tables
Note: This is just a recommendation and may not be the best implementation given your use case.





Accessing the API Using an Access Token
Applications use unexpired access tokens to make resource requests to the Strava API on the user’s behalf. Access tokens are required for all resource requests, and can be included by specifying the Authorization: Bearer #{access_token} header. For instance, using HTTPie:

$ http https://www.strava.com/api/v3/athlete 'Authorization: Bearer 83ebeabdec09f6670863766f792ead24d61fe3f9'


Example cURL Request
curl -G https://www.strava.com/api/v3/athlete -H "Authorization: Bearer ReplaceWithAccessToken"





Deauthorization
Applications can revoke access to an athlete’s data. This will invalidate all refresh tokens and access tokens that the application has for the athlete, and the application will be removed from the athlete’s apps settings page. All requests made using invalidated tokens will receive a 401 Unauthorized response.

The endpoint is POST https://www.strava.com/oauth/deauthorize.

access_token
required string, in query	Responds with the access tokens that were revoked.





How to Get Support
If you have questions, please check our developer community hub. Remember, never share access tokens, refresh tokens, authorization codes, or your client secret in a public forum.



Webhook Events API


Webhooks Overview
Webhook subscriptions allow an application to subscribe to events that occur within Strava. These events are pushed to a callback designated by the subscription shortly after the events occur on Strava. Webhooks enable applications to receive real-time updates for supported objects, eliminating the need for polling.

We encourage all API applications to use our webhook events API.

Event Data
The Strava Webhook Events API supports webhook events for certain changes to athlete and activity objects. Specifically, webhook events are pushed when an athlete revokes access to an application, or when an activity is created, deleted, or one of the following activity fields are updated:

Title
Type
Privacy, requires an access token with activity:read_all scope
When one of these events occurs in Strava, a POST request is made to the callback url for each subscription to which the event pertains. The body of this POST request contains the object_type and aspect_type of the updated object in addition to an object_id, which is either an activity or athlete ID. If additional information about the object is required, an application must decide how or if it wants to fetch the most up-to-date data. For example, you may decide only to fetch new data for specific users, or after a certain number of activities have been uploaded.

The subscription callback endpoint must acknowledge the POST of each new event with a status code of 200 OK within two seconds. Event pushes are retried (up to a total of three attempts) if a 200 is not returned. If your application needs to do more processing of the received information, it should do so asynchronously.

These are the fields that are included with webhook events:

object_type
string	Always either "activity" or "athlete."
object_id
long integer	For activity events, the activity's ID. For athlete events, the athlete's ID.
aspect_type
string	Always "create," "update," or "delete."
updates
hash	For activity update events, keys can contain "title," "type," and "private," which is always "true" (activity visibility set to Only You) or "false" (activity visibility set to Followers Only or Everyone). For app deauthorization events, there is always an "authorized" : "false" key-value pair.
owner_id
long integer	The athlete's ID.
subscription_id
integer	The push subscription ID that is receiving this event.
event_time
long integer	The time that the event occurred.
Example Request
{
    "aspect_type": "update",
    "event_time": 1516126040,
    "object_id": 1360128428,
    "object_type": "activity",
    "owner_id": 134815,
    "subscription_id": 120475,
    "updates": {
        "title": "Messy"
    }
}
Note that a single event can have multiple key-value pairs in updates. Also note that some activity attributes are updated asynchronously, so one “save” action by the athlete can result in multiple webhook events.

For example, if activity type and title are changed, the change to activity type may take place in the background after the title is saved.

Applications that have activity:read scope (recommended) and not activity:read_all scope will receive a delete event when an activity’s visibility is changed from Followers Only or Everyone to Only You. Similarly, these applications will receive a create event when an activity’s visibility is changed from Only You to one of the other settings. Per the Strava API Agreement, applications must respect an activity’s privacy.

Subscriptions
Each application may only have one subscription, but that single subscription will allow the application to receive webhook events for all supported changes to data owned by athletes that have authorized that application. Here is an example of how to create a dummy server to create a webhook subscription.

Webhook subscriptions, also referred to as push subscriptions, are managed through the push subscription API at:

$ https://www.strava.com/api/v3/push_subscriptions
Create a subscription
Creating a new webhook subscription is a two-step process:

Request subscription creation by making a POST request to the subscriptions endpoint. This request includes the application’s client_id and client_secret. It defines the callback address where events will be sent and also defines a verification token used in validating the callback address.
Validate the callback address. The Strava webhook system, upon receiving an subscription creation request, will issue a GET request to the newly defined callback address to validate that it is available. The server serving the callback address must respond to this GET in a timely and correct manner for the subscription to be validated and enabled.
Subscription Creation Request
Note that request parameters must be sent as HTTP form data, i.e. in URL format.

These are the required request parameters to create a webhook events subscription:

client_id
required integer	Strava API application ID
client_secret
required string	Strava API application secret
callback_url
required string	Address where webhook events will be sent; maximum length of 255 characters
verify_token
required string	String chosen by the application owner for client security. An identical string will be included in the validation request made by Strava's subscription service.
Example Request
$  curl -X POST https://www.strava.com/api/v3/push_subscriptions \
      -F client_id=5 \
      -F client_secret=7b2946535949ae70f015d696d8ac602830ece412 \
      -F callback_url=http://a-valid.com/url \
      -F verify_token=STRAVA
Subscription Validation Request
After your initial request to create a subscription, you will receive a HTTP GET request to the callback_url you specified. The query string of this GET request will contain a "hub.challenge" field that you must use to validate your callback address.

Here is the complete list of query string parameters in the validation GET request:

hub.mode
string	Always will be "subscribe".
hub.challenge
string	Random string the callback address must echo back to verify its existence.
hub.verify_token
string	This will be set to whatever verify_token is passed in with the initial subscription request, and it enables application owners to know that they are receiving the correct response from Strava's subscription service.
Example Validation Request
$ GET https://mycallbackurl.com?hub.verify_token=STRAVA&hub.challenge=15f7d1a91c1f40f8a748fd134752feb3&hub.mode=subscribe
Callback Validation
Your callback address must respond within two seconds to the GET request from Strava’s subscription service. The response should indicate status code 200 and should echo the hub.challenge field in the response body as application/json content type: { “hub.challenge”:”15f7d1a91c1f40f8a748fd134752feb3” }

Once you have successfully created a webhook events subscription by responding to the callback validation, you will receive a response to your original subscription creation POST request. This response will include the id of the newly created subscription. If creation of a new subscription fails, this response will instead include error information. The most common cause of subscription creation failure is a failure to respond in a timely manner to the validation GET request, or failure to correctly echo the hub.challenge field.

Example Subscription Creation Response
{
  "id": 1
}
View a Subscription
A GET request to the push subscription endpoint can be used to view subscription details. The request should include the following parameters in the query string:

client_id
required integer	Strava API application ID
client_secret
required string	Strava API application secret
Example Request
$ curl -G https://www.strava.com/api/v3/push_subscriptions \
    -d client_id=5 \
    -d client_secret=7b2946535949ae70f015d696d8ac602830ece412
Delete a Subscription
A DELETE request can be issued to the push subscriptions endpoint, with subscription ID appended, to delete the specified subscription:

$ https://www.strava.com/api/v3/push_subscriptions/id 
The following parameters should be included with a delete request:

id
required integer, in path	Push subscription ID
client_id
required integer, in query parameter	Strava API application ID
client_secret
required string, in query parameter	Strava API application secret
You will receive a 204 No Content if the delete is successful. Otherwise, an error will be returned containing the reason for a failure.

Example Request
$ curl -X DELETE "https://www.strava.com/api/v3/push_subscriptions/12345?client_id=5&client_secret=7b2946535949ae70f015d696d8ac602830ece412"
Troubleshooting Tips
Unable to create a subscription
Check if there is already a subscription registered for your app: View a Subscription. If so, delete it: Delete a Subscription.
Validate that your callback url responds to a validation request within 2 seconds. You can issue a request like the following to test:

$ curl -X GET ‘{your-callback-url}?hub.verify_token=test&hub.challenge=15f7d1a91c1f40f8a748fd134752feb3&hub.mode=subscribe’
Check that the response to the above request shows a 200 status and correctly echos the hub.challenge in the JSON body. The response body to the above sample curl request should look like { “hub.challenge”:”15f7d1a91c1f40f8a748fd134752feb3” }
Not receiving expected events
Check which scopes the athletes using your app have authorized. To receive updates for activities with Only You visibility, your application must have activity:read_all scope for the athlete. To receive updates for activities with Everyone or Followers visibility, your application must have activity:read_all or activity:read scope for the athlete.
Add generic logging and error handling as close to the edge of your network as possible - often an unhandled exception in webhook payload processing is the cause of “missing updates.”
Issue a POST to your callback URL manually to make sure it responds with a 200 status code and does appropriate processing. For example, you can use the following curl command, replacing owner_id, object_id, and subscription_id with your own test athlete id, test activity id, and webhook subscription id, respectively:

$ curl -X POST {your-callback-url} -H ‘Content-Type: application/json’

 -d ‘{
      “aspect_type”: “create”,
      “event_time”: 1549560669,
      “object_id”: 0000000000,
      “object_type”: “activity”,
      “owner_id”: 9999999,
      “subscription_id”: 999999
    }’


Strava API V3 Documentation
The Strava V3 API is a publicly available interface allowing developers access to the rich Strava dataset. The interface is stable and currently used by the Strava mobile applications.

Access
All calls to the Strava API require an access_token defining the athlete and application making the call. Any registered Strava user can obtain an access_token by first creating an application at https://www.strava.com/settings/api.

The API application settings page provides a public access token to get started. See the Authentication page for more information about generating access tokens and the OAuth authorization flow.

Generally speaking, a Strava API application only has access to a user’s data after the user has authorized the application to use it. Segment and segment leaderboard data is available to all applications.

Client code
You will need to have a Java runtime installed on your machine to run Swagger. To generate client code, you first need to install Swagger Codegen 2.X. On macOS, you may use Homebrew:

$ brew install swagger-codegen@2 maven
To generate code in a given language, run swagger-codegen generate and pass the following parameters:

--input-spec <spec file>: Use https://developers.strava.com/swagger/swagger.json for Strava’s API
--config <configuration file>: (optional) pass the settings or overrides you want the code generator to honor
--lang <language>: the target programming language you seek to generate code for (running swagger-codegen by itself will print a list of available languages)
--output <output directory>: where to write the resulting files
This example will generate Java code suitable to be packaged in an Android library:

$ swagger-codegen generate -i https://developers.strava.com/swagger/swagger.json -l java -o generated/java
Conventions
Object representations
Depending on the type of request, objects will be returned in meta, summary or detailed representations. The representation of the returned object is indicated by the resource_state attribute.

Resource states, in increasing levels of detail.

meta
summary
detailed
Pagination
Requests that return multiple items will be paginated to 30 items by default. The page parameter can be used to specify further pages or offsets. The per_page may also be used for custom page sizes up to 200. Note that in certain cases, the number of items returned in the response may be lower than the requested page size, even when that page is not the last. If you need to fully go through the full set of results, prefer iterating until an empty page is returned.

Polylines
Activity, segment and route API requests may include summary polylines of their respective paths. The values are string encodings of the latitude and longitude points using the Google encoded polyline algorithm format.

Dates
Dates and times follow the ISO 8601 standard, unless noted. A few examples:

2015-08-23T15:46:20Z
2018-06-24T09:54:13-07:00
For some resources the start_date_local attribute is provided as a convenience. It represents the UTC version of the local start time of the event. Displaying this value as UTC will show the correct local start time. The local time zone is also provided for some resources and can be used along with the start_date to achieve this as well.

Request methods
Where possible, API V3 strives to use appropriate HTTP verbs for each action.

HEAD can be issued against any resource to get just the HTTP header info
GET used for retrieving resources
POST used for creating resources, or performing custom actions
PUT used for updating or replacing resources
DELETE used for removing resources
Status codes
Here is a list of our common status codes.

200 Successful request
201 Your activity/etc. was successfully created
401 Unauthorized
403 Forbidden; you cannot access
404 Not found; the requested asset does not exist, or you are not authorized to see it
429 Too Many Requests; you have exceeded rate limits
500 Strava is having issues, please check https://status.strava.com


Strava API v3
API and SDK Reference
You can find general information about the API here. All requests to the Strava API require authentication. We have a few standalone pages with additional information about our webhooks, activity uploads and rate limits.

New to the Strava API? View our Getting Started Guide.
The Swagger Playground is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.



Activities
Create an Activity (createActivity)
Creates a manual activity for an athlete, requires activity:write scope.


post
/activities
Parameters
name
required String, in form	The name of the activity.
type
String, in form	Type of activity. For example - Run, Ride etc.
sport_type
required String, in form	Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.
start_date_local
required Date, in form	ISO 8601 formatted date time.
elapsed_time
required Integer, in form	In seconds.
description
String, in form	Description of the activity.
distance
Float, in form	In meters.
trainer
Integer, in form	Set to 1 to mark as a trainer activity.
commute
Integer, in form	Set to 1 to mark as commute.
Responses
HTTP code 201	The activity's detailed representation. An instance of DetailedActivity.
HTTP code 4xx, 5xx	A Fault describing the reason for the error.
HTTPie
Java
Obj-C
JavaScript
C#
Python
$ http post "https://www.strava.com/api/v3/activities" name='value' type='value' sport_type='value' start_date_local='value' elapsed_time='value' description='value' distance='value' trainer='value' commute='value' "Authorization: Bearer [[token]]"
Sample Response
{
  "id" : 123456778928065,
  "resource_state" : 3,
  "external_id" : null,
  "upload_id" : null,
  "athlete" : {
    "id" : 12343545645788,
    "resource_state" : 1
  },
  "name" : "Chill Day",
  "distance" : 0,
  "moving_time" : 18373,
  "elapsed_time" : 18373,
  "total_elevation_gain" : 0,
  "type" : "Ride",
  "sport_type" : "MountainBikeRide",
  "start_date" : "2018-02-20T18:02:13Z",
  "start_date_local" : "2018-02-20T10:02:13Z",
  "timezone" : "(GMT-08:00) America/Los_Angeles",
  "utc_offset" : -28800,
  "achievement_count" : 0,
  "kudos_count" : 0,
  "comment_count" : 0,
  "athlete_count" : 1,
  "photo_count" : 0,
  "map" : {
    "id" : "a12345678908766",
    "polyline" : null,
    "resource_state" : 3
  },
  "trainer" : false,
  "commute" : false,
  "manual" : true,
  "private" : false,
  "flagged" : false,
  "gear_id" : "b453542543",
  "from_accepted_tag" : null,
  "average_speed" : 0,
  "max_speed" : 0,
  "device_watts" : false,
  "has_heartrate" : false,
  "pr_count" : 0,
  "total_photo_count" : 0,
  "has_kudoed" : false,
  "workout_type" : null,
  "description" : null,
  "calories" : 0,
  "segment_efforts" : [ ]
}
Get Activity (getActivityById)
Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.


get
/activities/{id}
Parameters
id
required Long, in path	The identifier of the activity.
include_all_efforts
Boolean, in query	To include all segments efforts.
Responses
HTTP code 200	The activity's detailed representation. An instance of DetailedActivity.
HTTP code 4xx, 5xx	A Fault describing the reason for the error.
HTTPie
Java
Obj-C
JavaScript
C#
Python
$ http get "https://www.strava.com/api/v3/activities/{id}?include_all_efforts=" "Authorization: Bearer [[token]]"
Sample Response
{
  "id" : 12345678987654321,
  "resource_state" : 3,
  "external_id" : "garmin_push_12345678987654321",
  "upload_id" : 98765432123456789,
  "athlete" : {
    "id" : 134815,
    "resource_state" : 1
  },
  "name" : "Happy Friday",
  "distance" : 28099,
  "moving_time" : 4207,
  "elapsed_time" : 4410,
  "total_elevation_gain" : 516,
  "type" : "Ride",
  "sport_type" : "MountainBikeRide",
  "start_date" : "2018-02-16T14:52:54Z",
  "start_date_local" : "2018-02-16T06:52:54Z",
  "timezone" : "(GMT-08:00) America/Los_Angeles",
  "utc_offset" : -28800,
  "start_latlng" : [ 37.83, -122.26 ],
  "end_latlng" : [ 37.83, -122.26 ],
  "achievement_count" : 0,
  "kudos_count" : 19,
  "comment_count" : 0,
  "athlete_count" : 1,
  "photo_count" : 0,
  "map" : {
    "id" : "a1410355832",
    "polyline" : "ki{eFvqfiVqAWQIGEEKAYJgBVqDJ{BHa@jAkNJw@Pw@V{APs@^aABQAOEQGKoJ_FuJkFqAo@{A}@sH{DiAs@Q]?WVy@`@oBt@_CB]KYMMkB{AQEI@WT{BlE{@zAQPI@ICsCqA_BcAeCmAaFmCqIoEcLeG}KcG}A}@cDaBiDsByAkAuBqBi@y@_@o@o@kB}BgIoA_EUkAMcACa@BeBBq@LaAJe@b@uA`@_AdBcD`@iAPq@RgALqAB{@EqAyAoOCy@AmCBmANqBLqAZkB\\iCPiBJwCCsASiCq@iD]eA]y@[i@w@mAa@i@k@g@kAw@i@Ya@Q]EWFMLa@~BYpAFNpA`Aj@n@X`@V`AHh@JfB@xAMvAGZGHIDIAWOEQNcC@sACYK[MSOMe@QKKKYOs@UYQISCQ?Q@WNo@r@OHGAGCKOQ_BU}@MQGG]Io@@c@FYNg@d@s@d@ODQAMOMaASs@_@a@SESAQDqBn@a@RO?KK?UBU\\kA@Y?WMo@Iy@GWQ_@WSSGg@AkABQB_Ap@_A^o@b@Q@o@IS@OHi@n@OFS?OI}@iAQMQGQC}@DOIIUK{@IUOMyBo@kASOKIQCa@L[|AgATWN[He@?QKw@FOPCh@Fx@l@TDLELKl@aAHIJEX@r@ZTDV@LENQVg@RkA@c@MeA?WFOPMf@Ej@Fj@@LGHKDM?_@_@iC?a@HKRIl@NT?FCHMFW?YEYGWQa@GYBiAIq@Gq@L_BHSHK|@WJETSLQZs@z@_A~@uA^U`@G\\CRB\\Tl@p@Th@JZ^bB`@lAHLXVLDP?LGFSKiDBo@d@wBVi@R]VYVE\\@`@Lh@Fh@CzAk@RSDQA]GYe@eAGWSiBAWBWBIJORK`@KPOPSTg@h@}Ad@o@F[E_@EGMKUGmAEYGMIMYKs@?a@J}@@_BD_@HQJMx@e@LKHKHWAo@UoAAWFmAH}@?w@C[YwAAc@HSNM|Ao@rA}@zAq@`@a@j@eAxAuBXQj@MXSR[b@gAFg@?YISOGaAHi@Xw@v@_@d@WRSFqARUHQJc@d@m@`A[VSFUBcAEU@WFULUPa@v@Y~@UrBc@dBI~@?l@P~ABt@N`HEjA]zAEp@@p@TrBCl@CTQb@k@dAg@jAU^KJYLK@k@A[Js@d@a@b@]RgBl@[FMAw@[]G]?m@D_@F]P[Vu@t@[TMF_@Do@E_@@q@P]PWZUZw@vAkAlAGJOj@IlAMd@OR{@p@a@d@sBpD]v@a@`Aa@n@]TODgBVk@Pe@^cBfBc@Rs@La@RSPm@|@wCpDS^Wp@QZML{@l@qBbCYd@k@lAIVCZBZNTr@`@RRHZANIZQPKDW@e@CaASU?I@YTKRQx@@\\VmALYRQLCL?v@P|@D\\GJEFKDM@OCa@COOYIGm@YMUCM@]JYr@uAx@kAt@}@jAeAPWbAkBj@s@bAiAz@oAj@m@VQlAc@VQ~@aA`Au@p@Q`AIv@MZORUV_@p@iB|AoCh@q@dAaANUNWH[N{AJ[^m@t@_Av@wA\\a@`@W`@In@Al@B^E`@Wl@u@\\[VQ\\K`@Eb@?R@dAZP@d@CRExAs@\\Yt@{@LG\\MjAATINOXo@d@kAl@_AHYBOCe@QiBCm@Fq@\\wADo@AyGEeBWuB@YHu@Tu@Lk@VcCTo@d@aA\\WJE`@G~@FP?VI\\U~@sANO`@SfAMj@U\\WjAsAXS`@UNENALBHFFL?^Ml@Uj@]b@q@RUJSPkChEc@XcAb@sA|@]PaA\\OJKNER?TDTNj@Jn@?p@OfC@ZR`B@VCV_@n@{@l@WbACv@OlABnAPl@LNNHbBBNBLFFJ@^GLg@x@i@|AMP[X}@XOJKPET?l@LhAFXp@fBDRCd@S\\_@Ps@PQ@}A]S?QDe@V]b@MR[fAKt@ErAF~CANILYDKGIKe@{@Yy@e@sB[gA[c@e@YUCU?WBUHUNQPq@`AiArAMV[^e@Zc@JQJKNMz@?r@Bb@PfAAfA@VVbADn@E`@KHSEe@SMAKDKFM\\^dDCh@m@LoAQ_@@MFOZLfBEl@QbASd@KLQBOAaAc@QAQ@QHc@v@ONMJOBOCg@c@]O[EMBKFGL?RHv@ARERGNe@h@{@h@WVGNDt@JLNFPFz@LdBf@f@PJNHPF`ADPJJJDl@I`@B^Tp@bALJNDNALIf@i@PGPCt@DNE`@Uv@[dAw@RITGRCtAARBPJLPJRZxB?VEX_@vAAR?RDNHJJBh@UnBm@h@IRDRJNNJPNbBFRJLLBLCzAmAd@Uf@Gf@?P@PFJNHPFTH`BDTHNJJJ@LG`@m@^YPER@RDPHNNJRLn@HRLN^VNPHTFX@\\UlDFb@FHh@NP@HKPsB?}ASkCQ{@[y@q@}@cA{@KOCQDa@t@{CFGJCf@Nl@ZtA~@r@p@`@h@rAxBd@rA\\fARdAPjANrB?f@AtBCd@QfBkAjJOlBChA?rBFrBNlBdAfKFzAC~@Iz@Mz@Sv@s@jBmAxBi@hAWt@Sv@Qx@O`BA`@?dAPfBVpAd@`BfBlFf@fBdA~Cr@pAz@fApBhBjAt@H?IL?FBFJLx@^lHvDvh@~XnElCbAd@pGhDbAb@nAr@`Ad@`GhDnBbAxCbBrWhNJJDPARGP_@t@Qh@]pAUtAoA`Ny@jJApBBNFLJFJBv@Hb@HBF?\\",
    "resource_state" : 3,
    "summary_polyline" : "ki{eFvqfiVsBmA`Feh@qg@iX`B}JeCcCqGjIq~@kf@cM{KeHeX`@_GdGkSeBiXtB}YuEkPwFyDeAzAe@pC~DfGc@bIOsGmCcEiD~@oBuEkFhBcBmDiEfAVuDiAuD}NnDaNiIlCyDD_CtJKv@wGhD]YyEzBo@g@uKxGmHpCGtEtI~AuLrHkAcAaIvEgH_EaDR_FpBuBg@sNxHqEtHgLoTpIiCzKNr[sB|Es\\`JyObYeMbGsMnPsAfDxAnD}DBu@bCx@{BbEEyAoD`AmChNoQzMoGhOwX|[yIzBeFKg[zAkIdU_LiHxK}HzEh@vM_BtBg@xGzDbCcF~GhArHaIfByAhLsDiJuC?_HbHd@nL_Cz@ZnEkDDy@hHwJLiCbIrNrIvN_EfAjDWlEnEiAfBxDlFkBfBtEfDaAzBvDKdFx@|@XgJmDsHhAgD`GfElEzOwBnYdBxXgGlSc@bGdHpW|HdJztBnhAgFxc@HnCvBdA"
  },
  "trainer" : false,
  "commute" : false,
  "manual" : false,
  "private" : false,
  "flagged" : false,
  "gear_id" : "b12345678987654321",
  "from_accepted_tag" : false,
  "average_speed" : 6.679,
  "max_speed" : 18.5,
  "average_cadence" : 78.5,
  "average_temp" : 4,
  "average_watts" : 185.5,
  "weighted_average_watts" : 230,
  "kilojoules" : 780.5,
  "device_watts" : true,
  "has_heartrate" : false,
  "max_watts" : 743,
  "elev_high" : 446.6,
  "elev_low" : 17.2,
  "pr_count" : 0,
  "total_photo_count" : 2,
  "has_kudoed" : false,
  "workout_type" : 10,
  "suffer_score" : null,
  "description" : "",
  "calories" : 870.2,
  "segment_efforts" : [ {
    "id" : 12345678987654321,
    "resource_state" : 2,
    "name" : "Tunnel Rd.",
    "activity" : {
      "id" : 12345678987654321,
      "resource_state" : 1
    },
    "athlete" : {
      "id" : 134815,
      "resource_state" : 1
    },
    "elapsed_time" : 2038,
    "moving_time" : 2038,
    "start_date" : "2018-02-16T14:56:25Z",
    "start_date_local" : "2018-02-16T06:56:25Z",
    "distance" : 9434.8,
    "start_index" : 211,
    "end_index" : 2246,
    "average_cadence" : 78.6,
    "device_watts" : true,
    "average_watts" : 237.6,
    "segment" : {
      "id" : 673683,
      "resource_state" : 2,
      "name" : "Tunnel Rd.",
      "activity_type" : "Ride",
      "distance" : 9220.7,
      "average_grade" : 4.2,
      "maximum_grade" : 25.8,
      "elevation_high" : 426.5,
      "elevation_low" : 43.4,
      "start_latlng" : [ 37.8346153, -122.2520872 ],
      "end_latlng" : [ 37.8476261, -122.2008944 ],
      "climb_category" : 3,
      "city" : "Oakland",
      "state" : "CA",
      "country" : "United States",
      "private" : false,
      "hazardous" : false,
      "starred" : false
    },
    "kom_rank" : null,
    "pr_rank" : null,
    "achievements" : [ ],
    "hidden" : false
  } ],
  "splits_metric" : [ {
    "distance" : 1001.5,
    "elapsed_time" : 141,
    "elevation_difference" : 4.4,
    "moving_time" : 141,
    "split" : 1,
    "average_speed" : 7.1,
    "pace_zone" : 0
  } ],
  "laps" : [ {
    "id" : 4479306946,
    "resource_state" : 2,
    "name" : "Lap 1",
    "activity" : {
      "id" : 1410355832,
      "resource_state" : 1
    },
    "athlete" : {
      "id" : 134815,
      "resource_state" : 1
    },
    "elapsed_time" : 1573,
    "moving_time" : 1569,
    "start_date" : "2018-02-16T14:52:54Z",
    "start_date_local" : "2018-02-16T06:52:54Z",
    "distance" : 8046.72,
    "start_index" : 0,
    "end_index" : 1570,
    "total_elevation_gain" : 276,
    "average_speed" : 5.12,
    "max_speed" : 9.5,
    "average_cadence" : 78.6,
    "device_watts" : true,
    "average_watts" : 233.1,
    "lap_index" : 1,
    "split" : 1
  } ],
  "gear" : {
    "id" : "b12345678987654321",
    "primary" : true,
    "name" : "Tarmac",
    "resource_state" : 2,
    "distance" : 32547610
  },
  "partner_brand_tag" : null,
  "photos" : {
    "primary" : {
      "id" : null,
      "unique_id" : "3FDGKL3-204E-4867-9E8D-89FC79EAAE17",
      "urls" : {
        "100" : "https://dgtzuqphqg23d.cloudfront.net/Bv93zv5t_mr57v0wXFbY_JyvtucgmU5Ym6N9z_bKeUI-128x96.jpg",
        "600" : "https://dgtzuqphqg23d.cloudfront.net/Bv93zv5t_mr57v0wXFbY_JyvtucgmU5Ym6N9z_bKeUI-768x576.jpg"
      },
      "source" : 1
    },
    "use_primary_photo" : true,
    "count" : 2
  },
  "highlighted_kudosers" : [ {
    "destination_url" : "strava://athletes/12345678987654321",
    "display_name" : "Marianne V.",
    "avatar_url" : "https://dgalywyr863hv.cloudfront.net/pictures/athletes/12345678987654321/12345678987654321/3/medium.jpg",
    "show_name" : true
  } ],
  "hide_from_home" : false,
  "device_name" : "Garmin Edge 1030",
  "embed_token" : "18e4615989b47dd4ff3dc711b0aa4502e4b311a9",
  "segment_leaderboard_opt_out" : false,
  "leaderboard_opt_out" : false
}









Create an Activity
Get Activity
List Activity Comments
List Activity Kudoers
List Activity Laps
List Athlete Activities
Get Activity Zones
Update Activity
Athletes
Get Authenticated Athlete
Get Zones
Get Athlete Stats
Update Athlete
Clubs
List Club Activities
List Club Administrators
Get Club
List Club Members
List Athlete Clubs
Gears
Get Equipment
Routes
Export Route GPX
Export Route TCX
Get Route
List Athlete Routes
SegmentEfforts
List Segment Efforts
Get Segment Effort
Segments
Explore segments
List Starred Segments
Get Segment
Star Segment
Streams
Get Activity Streams
Get Route Streams
Get Segment Effort Streams
Get Segment Streams
Uploads
Upload Activity
Get Upload
All Models
ActivityStats
ActivityTotal
ActivityType
ActivityZone
BaseStream
ClubActivity
ClubAthlete
Comment
Error
ExplorerResponse
ExplorerSegment
Fault
HeartRateZoneRanges
Lap
LatLng
MetaActivity
MetaAthlete
MetaClub
PhotosSummary
PhotosSummary_primary
PolylineMap
PowerZoneRanges
Route
Split
SportType
StreamSet
SummaryGear
SummaryPRSegmentEffort
SummarySegment
SummarySegmentEffort
TimedZoneDistribution
UpdatableActivity
Upload
Waypoint
ZoneRange
ZoneRanges
Zones
AltitudeStream
CadenceStream
DetailedGear
DetailedSegment
DetailedSegmentEffort
DistanceStream
HeartrateStream
LatLngStream
MovingStream
PowerStream
SmoothGradeStream
SmoothVelocityStream
SummaryActivity
SummaryAthlete
SummaryClub
TemperatureStream
TimeStream
TimedZoneRange
DetailedActivity
DetailedAthlete
DetailedClub


